==========================================

C Grundlagen

Mittwoch

==========================================

Bemerkung:

int str_insert(char* ursprung, char* ergebnis, int length, char welchesZeichen, int pos)

Es gibt den Datentyp bool NICHT.

==> int

#define FALSE 0
#define TRUE  1

Damit wird 'bool' simuliert

=========================================

Übungen:

replace – Ersetzen eines Zeichens.

append – Anhängen einer Zeichenkette an eine andere Zeichenkette ODER

append – Anhängen eines Zeichens an eine andere Zeichenkette


Bemerkungen:


Entwurfsentscheidungen:

a) void replace(char* quelle, int pos, char ch);    // Änderung im Original

b) void replace(char* quelle, char* ziel, int length, int pos, char ch);    // Ergebnis in einem separaten Puffer






"12345"   "ABC"   ==> "12345ABC"

int append(char* quelle, char* anzuhaengen, char* ziel, int length);

char puffer [100];

append ("12345" , "ABC" , puffer, 100 );




ETWAS EINFACHER:

Anhängen eines einzelnen Zeichens:

int append(char* quelle, char zeichen, char* ziel, int length);

char puffer [100];

append ("12345" , '!' , puffer, 100 );

=========================================

Bemerkung:

Übersicht
Realisieren Sie ein oder mehrere Funktionen, die auf Zeichenketten operieren:

length – Berechnet die Länge einer Zeichenkette.
replace – Ersetzen eines Zeichens oder einer Zeichenkette.
append – Anhängen eines Zeichens oder einer Zeichenkette.
insert – Einfügen eines Zeichens oder einer Zeichenkette in eine andere Zeichenkette.
remove – Anhängen eines Zeichens oder einer Zeichenkette an eine andere Zeichenkette.

===> Bibliothek:   CRT - C Runtime Library

https://github.com/MicrosoftDocs/cpp-docs/blob/main/docs/c-runtime-library/c-run-time-library-reference.md

Beispiel:

char *strcat(
   char *strDestination,      // Länge ??????????????
   const char *strSource 
);

In einer ersten Definition waren diese Funktion minimalistisch realisiert: Keine Bereichsüberprüfung.

Was nehmen wir mit:

==> C-Programm:   ==> CRT - C Runtime Library

Warum haben wir str_append selber realisiert: VERSTÄNDNIS !!!!!!!!!!!!

=========================================

Dynamischen Speicherverwaltung:

https://github.com/pelocpp/cpp_introduction/blob/master/Cpp_Introduction/Markdown/DynamicMemoryManagement.md

malloc ():  

Wieviel Speicher?   Größe ist in BYTES.

Nicht vorbelegter Speicher:

0xCCCCC      => Stack

0xCDCDCDCD   => Heap - nach der Reservierung

0xDDDDDDDD   => Heap - nach der Freigabe

=========================================

    int* ip = malloc(1 * sizeof(int));

    if (ip == NULL) {
        printf("Kein Speicher mehr ....");
        return;
    }

Frage: Muss die if-Anweisung sein ???????????????

a) Bei GROßen ANFORDERUNGEN: Ja

b) bei kleinen: Nicht unbedingt !

=========================================

ACHTUNG:

Ein "Double-free" ist NICHT MÖGLICH / ABSTURZ !!!!!!!!!!

Warum ist das nicht möglich ???

Die CRT (malloc / free) ist nicht in der Lage,
einer Adresse anzusehen, ob sie gültig ist oder nicht.

ACHTUNG:  Man kann - nicht zugesprochenen Speicher (<== malloc) durchaus überschreiben (Fehler)

Der Absturz kommt - manchmal - SPÄTER !!!!!!!!!!!!!

DIESE FEHLER SIND BISWEILEN SCHWER ZU ENTDECKEN.


=========================================

Mögliche Hilfen:

A) Memory Leak Detektor:

Detected memory leaks!
Dumping objects ->
C:\Development\Seminar_C_Grundlagen_Mai_2024\C_GettingStarted\C_GettingStarted\Test_11.c(121) : {80} normal block at 0x0000016D691BDB70, 40 bytes long.
 Data: <                > 00 00 00 00 02 00 00 00 04 00 00 00 06 00 00 00 
Object dump complete.


Hiermit kann man FEHLENDE free's suchen.

Debug Error!

Program: ...agen_Mai_2024\C_GettingStarted\x64\Debug\C_GettingStarted.exe

HEAP CORRUPTION DETECTED: after Normal block (#80) at 0x00000175449FDD30.
CRT detected that the application wrote to memory after end of heap buffer.

Memory allocated at C:\Development\Seminar_C_Grundlagen_Mai_2024\C_GettingStarted\C_GettingStarted\Test_11.c(120).

Man muss penibelst genau Adressen (malloc) und deren zulässige Länge (Parameter von malloc)
im Programm verfolgen / beobachten.

===================================================================

Strukturen

Zusammenfassung mehrerer Daten (die sinnigerweise irgendwie zusammengehören)
in einem gemeinsamen Konstrukt.

Bemerkung: =======>  eine Struktur ist der Vorläufer einer Klasse (OO)


Gegenstück zu Feldern / Arrays:

Ansammlung von Daten - diese können unterschiedlichen Typs sein:

Beispiel:

Person: Namen, Alter

SYNTAX:

struct Person
{
    char firstName[32];
    char lastName[32];
    int  age;
};


Nebenbemerkung:

Gibt es eine bessere Lösung, als immer 32 Zeichen zu reservieren?

struct Person
{
    char* firstName;  // malloc - allokiertes Stück Speicher // free
    char* lastName;
    int  age;
};

===================================

// Datentyp wie int, double, Array
struct Time
{
    int hours;
    int minutes;
    int seconds;
};


Zusammengesetzter Datentyp

user-defined data type

Benutzerdefinierter Datentyp <=> System-seitigen Datentyp

=======================================================

Beobachtung:

Warum gibt es bei

initTime(jetzt, 13, 25, 33, 100);

KEINEN FEHLER, wenn die Funktion 'initTime' durch

void initTime(struct Time time, int hours, int minutes, int seconds)

definiert ist ?????????????????

===> printf in C mit bel. vielen Parametern haben können .


=======================================================

Empfehlung:

Möchte man Strukturen in MEHREREN Dateien verwenden,
sollte man diese in eine sog. "Header"-Datei auslagern.

"Header"-Datei: Datei mit der Endung h.

Bemerkung:

"Header"-Dateien sind NiCHT übersetzungsfähig

   ==> Sie tragen NICHT zu einem .obj File bei !!!

======================================================

Bemerkung:

void initTime (struct Time* time, int hours, int minutes, int seconds)
{
   ....... 
   // KEINE KENNTNIS, ob die Adresse (time) auf die Halde oder den Stack zeigt.



Aufruf von initTime:

2 Möglichkeiten des AUFRUFS:

A) struct Time time;   // STACK

   initTime  ( & time, ...);

B) struct Time* pt = malloc (sizeof (struct Time));   // HEAP

   initTime  ( pt, ...);

=====================================================

Stack und Heap:

Dualität
Symbiose

=====================================================

Was ist ein Nachteil dieser Realisierung:

void printTime(struct Time time);

==> Performanz ist auf Grund der Kopie schlecht!

Go-for-Pointer :)

=====================================================

Übung: Geldbeutel.

// 50€ und 30 ct
addWallet(&wallet1, 50, 30);


// 50€ und 30 ct entnehmen - WENN soviel Geld im Geldbeutel vorhanden ist !!!
subWallet(&wallet1, 50, 30);

=====================================================

Bemerkung zur Struktur Wallet:


struct Wallet
{
    unsigned long long m_euros;
    unsigned int m_cents;
};

Das mit dem Unterlauf ist nicht immer ganz einfach:

    // underrun
    if (wallet->m_cents < other->m_cents)
    {
        wallet->m_euros = wallet->m_euros - 1;
        wallet->m_cents = wallet->m_cents + 100;
    }

    wallet->m_euros = wallet->m_euros - other->m_euros;
    wallet->m_cents = wallet->m_cents - other->m_cents;

=====> Produkt-SW realisieren:

struct Wallet
{
    unsigned int m_totalCents;  // es genügt eine einzige Variable: Cent 
};

==============================================================

Abschluss:
==========

Umsetzung eines dynamischen Arrays in C:

Kombination: Struktur und dyn. Daten.

Struktur 'DynamicIntArray':

Wir programmieren in C mit einem Touch "Objekt-Orientierung".

==> OO Struktur.

(( C++ viel, viel besser ))

Wie geht das ???

2 Dinge:

A) Eine Struktur (Klasse / Daten)

B) Mehrere Funktionen (Klasse / Methoden),
   die diese Struktur als (ersten) Parameter haben.


Das sieht zu einer OO-Klasse recht ähnlich aus:

==> OO Klasse - die diese Funktionen INNERHALB der Klasse als MEMBER-Methoden hat.

(( Methode der schrittweisen Verfeinerung ))

Merksatz: Zu jedem malloc/calloc gehört ein free !!!

Nebenbemerkung:

In der OO-Welt:

== Konstruktoren    (initDynamicIntArray)
== Destruktoren     (releaseDynamicIntArray)
== Methoden         (Funktionen)
== getter/setter    (Zugriff auf die privaten Instanzvariablen: nachahmen)

Gibt es in C BEIDE NICHT !!!!!!!

// ==================================================

Benerkung:

Werden Funktionen bzgl. ihrer Schnittstelle / Funktionalität komplexer,

so bedarf es einer SPEZIFIKATION / DOKUMENTATION.

// ==================================================
