==========================================

C Grundlagen

Dienstag

==========================================

Felder / Array:

Was ist ein Feld:

Feld: dt. Übersetzung für Array.

> Ein Stück Speicher / Ein Speicherbereich, der mehrere Variablen DESSELBEN Typs enthält.

> Die Länge / Größe des Speicherbereichs ist FEST !!!!!!!

> int numbers[10];  // 10 ist FIX

((

     ABER: Es geht auch mit einer variable Länge:

     (( Dynamisch Speicher anlegen))

     int n = 10;

     int* numbers = malloc (n * sizeof (int));

     VORSICHT:

     free (numbers);

))






// C99: Dieser Dialekt kann das.

Beispiele:

Europa-Wahl: Stimme 

20 Parteien:

Feld der Länge 20 des Typs int anbieten:

SPD: Wo in dem Feld sind die Stimmen der SPD

CDU: Wo in dem Feld sind die Stimmen der CDU

==> Index

int stimmen [20];

// SPD: Index 0
// CDU: Index 1
// FDP: Index 2

#define SPD_Index 0
#define CDU_Index 1

==========================================================

SYNTAX:   Daten (keine Kontrollstruktur)

type name_des_felds [ laenge ];


Zugriff auf ein einzelnes Element:  Mit Index

ACHTUNG:

Beispiel:

int numbers[10];

Zugriff auf das ERSTE Element:

   numbers[0] = 1;


Zugriff auf das LETZTE Element:

   numbers[9] = 2;


"Was steht im DRITTEN Element drin ???"  ???

Meinst du Index 3 oder Index 2 ist eine sinnvolle Frage

Bemerkung:

int numbers[10];

numbers[10] = 123;   NOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO / FALSCH


Bemerkung:  sizeof  ==> bytes !!!

// ===========================================================

Adressen / Zeiger
------------------

Wozu ???  ==> Da kommen viele Anwendungen / Beispiele - versprochen.

Erste Anwendung: Parameterübergabe

Wie werden Parameter übergeben ?

Speicherbereich: Stapel / Stack

Wie kann ich auf den Stack zugreifen ???

NICHT direkt, also an einer Adresse in diesem Bereich !!!

TOS: Top of Stack

SP:  Stack Pointer -  dieser zeigt auf die erste freie Stelle

Zugriff: Push .. lege einen Wert an der ersten freien Stelle ab // SP korrigiert 


============================================================

Parameterübergabe in C:

a) Zu jedem Parameter (realen Wert) wird eine KOPIE auf dem Stapel angelegt.

b) Das Unterprogramm hat Zugriff auf die KOPIE.

c) Jargon:   ("Call-by-Copy")   Call-by-Value.

https://github.com/pelocpp/cpp_introduction/blob/master/Cpp_Introduction/Markdown/ParameterPassingTechniques.md

Alle innerhalb von Funktionen vorgenommenen Änderungen werden an den Funktionskopien vorgenommen
und damit nicht in den tatsächlichen Parametern (originaler Speicherort) des Funktionsaufrufs widergespiegelt.

Copy-by-Value: Die Originale sind geschützt.

d) Es ist auch "Call-by-Address" möglich:

   Die Adresse ist EXPLIZIT (mit dem & Operator) zu übergeben.


============================================================

Frage:

Gibt es einen prinziellen Unterschied zwischen einem DIREKTEN
und einem INDIREKTEN Zugriff auf eine Variable ???

    n = 456;
00007FF6198E675D  mov         dword ptr [n],1C8h  


    *pi = 789;
00007FF6198E6764  mov         rax,qword ptr [pi]  
00007FF6198E6768  mov         dword ptr [rax],315h  


PERFORMANZ

============================================================

2 Übungen:

Schreiben Sie eine Funktion tausche / swap :

Diese besitzt 2 Parameter: Die Werte der Variablen des Aufrufs werden getauscht :)


void test_07()
{
    int x = 123;
    int y = 456;

    printf("x = %d, y = %d\n", x, y);   // 123 , 456

    swap (&x, &y);    // oder so ähnlich :)

    printf("x = %d, y = %d\n", x, y);   // 456 , 123
}

Lösung:
-------

static void swap(int* px, int* py)
{
    int tmp = *py;

    *py = *px;

    *px = tmp;
}



Zweite Aufgabe:

Abschnitt "Zeiger (Pointer)"

Aufgabe zum Datentyp Zeiger (Pointer)

// ===================================================

Zeigerarithmetik

int* pi;

pi = &n;

.....

pi ++;

"Wir gehen eine Adresse weiter"

Beispiel:  pi hat den Wert 0x1024 als Adresse

pi++;

Wie funktioniert ++ in diesem Fall ???

Definition:

Der ++ Operator soll die NÄCHSTE Adresse bilden,
an der eine int-Variable liegen kann.

pi: 0x1024

Wenn Hinter 0x1024 eine int-Variable liegt: 

int-Variable benötigt 4 Bytes: 0x1024, 0x1025, 0x1026, 0x1027

Welchen Wert hat pi jetzt: 0x1028

Warum: sizeof (int) == 4

Der ++ - Operator geht im Speicher diese Anzahl Bytes weiter !!!!!!!!!!

Warum läuft es:  Zufall.

================================================

Zeigerarithmetik:

Wozu ?????????????????????????

"Spirit / Geist von C"

Aussage:  Ironisch ==> "Es gibt in C keine Arrays / Felder"

Kernaussage:

int zahlen[5] = { 0 };

Was ist 'zahlen' ???

Der Name / Bezeichner / Idenitifier eines Felds.

Präziser / Exakt:

Eine Anfangsadresse eines Stücks Speicher
-----------------------------------------

Der Index-Operator [] für Felder in C

wird INTERN (bei der Übersetzung) abgebildet auf 

eine INDIREKTEN Zugriff mit Zeigerarithmetik:

zahlen[i]  ===> * (zahlen + i)

===============================================

Ein Feld an ein Unterprogramm übergeben:

Vorbemerkung:

Geht, es wird die (Anfangs-)Adresse des Felds übergeben.


A)
    void feldVorbelegen(int feld[5]) ....

    GANZ SCHLECHT ... BITTE NICHT SO MACHEN

    UND: Die Länge 5 ist im Unterprogramm NICHT VERFÜGBAR.

B)
    void feldVorbelegen2(int feld[], int length) ...

    BESSER ... feld steht für eine Anfangsadresse,
           die Länge ist separat in einem zweiten Parameter
           zu übergeben

C)
    void feldVorbelegen3(int* feld, int length) ...

    Aus meiner Sicht optimal:

    Ein Array ist eine Anfangsadresse ... die Länge, die
    verfügbar ist, wird im 2. Parameter übergeben.



        feld[i] = 2 * i;
00007FF75A5671B0  mov         eax,dword ptr [rbp+4]  
00007FF75A5671B3  shl         eax,1  
00007FF75A5671B5  movsxd      rcx,dword ptr [rbp+4]  
00007FF75A5671B9  mov         rdx,qword ptr [feld]  
00007FF75A5671C0  mov         dword ptr [rdx+rcx*4],eax  
        
        // ist identisch mit

        *(feld + i) = 2 * i;
00007FF75A5671C3  mov         eax,dword ptr [rbp+4]  
00007FF75A5671C6  shl         eax,1  
00007FF75A5671C8  movsxd      rcx,dword ptr [rbp+4]  
00007FF75A5671CC  mov         rdx,qword ptr [feld]  
00007FF75A5671D3  mov         dword ptr [rdx+rcx*4],eax  

Übung:

Machen wir  ... Felder und Unterprogramme ... 

"Two-in-One":   Zeichenketten.

Nachbemerkung;

Ein Feld an ein Unterprogramm übergeben:

Geht, es wird die (Anfangs-)Adresse des Felds übergeben.

Die Länge des Feldes ist - an Hand der Adresse - NICHT verfügbar:

Man spricht hier von "Array Decay"

to decay: es geht etwas verloren - die Länge.

======================================================

Zeichen und Zeichenketten


Zeichen:       Singular

Zeichenkette:  Plural

Zeichen:       Datentyp char

Größe:         1 Byte

Im Maschinencode wird ein Zeichen mit einem int-Wert dargestellt.

Welchem int-Wert?  ASCII-Tabelle.

https://github.com/pelocpp/cpp_introduction/blob/master/Cpp_Introduction/Markdown/Strings.md

Symbiose:      char <=> int

Normalfall:    Zwischen verschiedenen Datentypen gibt es keine Symbiose:
               Typkonvertierung.

Was ist Carriage Return ?????????????

Was ist eine Schreibmaschine ???

Oben ist der Wagen.  ===> Wagenrücklauf = Carriage Return;

Windows:

Linux/Unix:  

1 zeichen:  13 = Carriage Return;

2 Zeichen:  Line Feed + Form Feed


// ================================================

Was ist eine Zeichenkette: Eine Folge von Zeichen

Wie wird in C eine Zeichenkette im Speicher abgebildet:

C-Zeichenkette:

a) Als Array der entsprechenden ASCII-Codes.

b) Plus am Ende eine 0: Die abschließende / das terminierende Null-Zeichen

WOZU die 0 ?????????????????????????

Es gibt bei einer Zeichenkette in C KEINE Information der Länge !!!

Deshalb ist das Ende der Zeichenkette mit der 0 im Speicher zum Ausdruck
zu bringen.


Frage: Ist ein char-Array // char zeichen[20] eine Zeichenkette in C ???

Depends :)  Wenn in dem Array die Zeichenkette mit einer 0 abgeschlossen ist !!!

=========================================================================

Zeichen

Zeichenketten:

Definition == Folge von Zeichen PLUS '\0'

Im Programm:  i)  Konstante: "ABCDE" (die '\0' ist da automatisch dabei)

              ii) Feld von char: Das  '\0' hier nicht vergessen.


=========================================================================

Speicherbereiche in C:
(in Programmiersprachen)
----------------------

https://github.com/pelocpp/cpp_introduction/blob/master/Cpp_Introduction/Markdown/DynamicMemoryManagement.md

a) Stack und Heap

b) Globale Variablen // remanent

C  ==> Betriebssystem:  C-Programm ==> PROZESS ==> Speicher

i)  Globale Variablen:
      Wird auf der OBERSTEN Ebene veinbart.

      ==> Eigen sich zur Ablage von Daten, die - mit Sicherheit -
          während der gesamten Programmlaufzeit benötigt werden.

ii) Lokale Variablen:
      Werden INNERHALB von Funktionen veinbart.

      ==> Sie eignen sich nur zur Ablage von Zwischenergebnissen.

iii) Dynamischen Variablen:

     Werden angelegt, wenn man sie benötigt ... und freigegeben,
     wenn man sie nicht mehr benötigt.


Es gibt in Programmen auch KONSTANTE:  

int n = 123;

double d = 234234.23423;   // 8 Bytes

"asdasdasdasdasdasd"



Zuordnung zur Maschinen-Architektur:

Globales Datensegment (Data)  ==>  Globale Variablen
                                   Konstanten

Codebereich (Code)            ==>  Maschinencode
                                   Konstanten

Stapel (Stack)                ==>  Lokale Variablen (push, pop)

Halde (Heap)                  ==>  Dynamischen Variablen

=========================================================================

A) char* kette1 = "123456";

B) char kette2[20] = "123456";


i) Gemeinsamkeiten:

   kette1 und kette2 stehen für ADRESSEN.


ii) Unterschiede:

a) char* kette1 = "123456";

   WO LIEGT kette1 im Speicher ?

   "123546" ist konstant ==> vermutlich im 

   Globales Datensegment (Data) oder im Codebereich (Code)



b)  char kette2[20] = "123456";

   WO LIEGT kette2 im Speicher ?

   2 Möglichkeiten: 

   i) Globales Datensegment (Data), wenn global definiert

   ii) Stack, wenn es ich um eine lokale Variable handelt.


   // Übungen: Vom Tisch .. morgen zum Start


A) Länge einer Zeichenkette: 

     int str_length(char* cp);

B) Ein Zeichen einfügen:

     int str_insert (char* ursprung, char* ergebnis, int length, char welchesZeichen, int pos);

     'A' in "12345" nach der 2. Stelle einfügen

     "123A45"

C) Ein Zeichen löschen
